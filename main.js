'use strict';

var obsidian = require('obsidian');
var crypto = require('crypto');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var crypto__namespace = /*#__PURE__*/_interopNamespace(crypto);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const VIEW_TYPE_STATS_TRACKER = "stats-tracker";

// const text = 'Hello, Obsidian!'
const secretKey = '!7iCQt*7(sLE$JW9';
const algorithm = 'aes-128-cbc';
const key = crypto__namespace.scryptSync(secretKey, 'salt', 16);
// // Hashing
// const hash = crypto.createHash('sha256').update(text).digest('hex')
// console.log('Hashed Text:', hash)
const encrypt = (text, version = 'v1') => {
    const iv = crypto__namespace.randomBytes(16);
    const cipher = crypto__namespace.createCipheriv(algorithm, key, iv);
    let encrypted = cipher.update(text, 'utf8', 'base64');
    encrypted += cipher.final('base64');
    const encryptedText = iv.toString('base64') + ':' + encrypted;
    // console.log('Encrypted Text:', encryptedText)
    return `${version}:${encryptedText}`;
};
const decrypt = (encryptedText) => {
    const [version, ivBase64, encryptedData] = encryptedText.split(':');
    // console.log('version', version)
    if (version !== 'v1') {
        throw new Error('Invalid version');
    }
    const ivBuffer = Buffer.from(ivBase64, 'base64');
    const decipher = crypto__namespace.createDecipheriv(algorithm, key, ivBuffer);
    let decrypted = decipher.update(encryptedData, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    // console.log('Decrypted Text:', decrypted)
    return decrypted;
};
const Encryption = () => {
    return { encrypt, decrypt };
};

function formatDateToYYYYMMDD(date) {
    // Extracting individual components
    const year = date.getFullYear();
    let month = String(date.getMonth() + 1); // Months are zero-based!
    let day = String(date.getDate());
    // Ensuring two-digit formats for month and day
    if (+month < 10) {
        month = '0' + month;
    }
    if (+day < 10) {
        day = '0' + day;
    }
    // Concatenating components in YYYY-MM-DD format
    return `${year}-${month}-${day}`;
}

function listAllPlugins(app) {
    const plugins = Object.values(app.plugins.plugins).map((plugin) => ({
        id: plugin.manifest.id,
        name: plugin.manifest.name,
        version: plugin.manifest.version,
    }));
    return plugins;
}

class DailyStatsSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'ObsiPulse Settings' });
        new obsidian.Setting(containerEl)
            .setName('License Key')
            .setDesc('Enter your license key to activate ObsiPulse plugin')
            .addText((text) => text
            .setPlaceholder('Your license key here...')
            .setValue(this.plugin.settings.key || '')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.key = value;
            yield this.plugin.saveSettings();
            const parsedKey = parseLicenseKey(value);
            this.plugin.settings.userId = parsedKey.userId;
        })));
    }
}
const DEFAULT_SETTINGS = {
    dayCounts: {},
    todaysWordCount: {},
    userId: null,
};
const parseLicenseKey = (key) => {
    // console.log('--parsing key', key)
    const parsedKey = Encryption().decrypt(key);
    // console.log({ parsedKey })
    try {
        const value = JSON.parse(parsedKey);
        console.log({ value });
        return value;
    }
    catch (e) {
        console.error('--error decrypting key', e);
    }
};
class DailyStats extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('--Obsidian Export Stats Plugin Loaded');
            // console.log({
            //   dir: this.app.vault.configDir,
            //   root: this.app.vault.getRoot(),
            //   dirname: __dirname,
            //   name: this.app.vault.adapter.getName(),
            //   path: this.app.vault.adapter.basePath,
            //   id: this.app.appId,
            // })
            yield this.loadSettings();
            // const key = Encryption().encrypt(
            //   JSON.stringify({ key: '6KAcZY2y658x559oAmbNmL5840oxQo', userId: '0b3417c00370b98c' }),
            // )
            // console.log({ key, l: key.length })
            // const testKey = Encryption().decrypt(key)
            // console.log({ testKey })
            // parseLicenseKey(key)
            if (this.settings.key) {
                try {
                    const parsedKey = parseLicenseKey(this.settings.key);
                    this.settings.userId = parsedKey.userId;
                    new obsidian.Notice('ObsiPulse plugin has been loaded!');
                    this.onLicenseKeyUpdate();
                }
                catch (e) {
                    console.error('--error parsing key', e, this.settings.key);
                    new obsidian.Notice('Invalid licence key for ObsiPulse plugin');
                }
            }
            else {
                new obsidian.Notice('Missing licence key for ObsiPulse plugin');
            }
            this.statusBarEl = this.addStatusBarItem();
            this.updateDate();
            if (this.settings.dayCounts.hasOwnProperty(this.today)) {
                this.updateCounts();
            }
            else {
                this.currentWordCount = 0;
            }
            this.debouncedUpdate = obsidian.debounce((contents, filepath) => {
                this.updateWordCount(contents, filepath);
            }, 
            // 400,
            1000, false);
            this.debouncedUpdateDb = obsidian.debounce((key, value) => {
                this.updateDb(key, value);
            }, 1000, false);
            this.registerEvent(this.app.workspace.on('quick-preview', this.onQuickPreview.bind(this)));
            this.registerInterval(window.setInterval(() => {
                this.statusBarEl.setText(this.currentWordCount + ' words today ');
            }, 2000));
            this.registerInterval(window.setInterval(() => {
                this.updateDate();
                this.saveSettings();
            }, 5000));
            if (this.app.workspace.layoutReady) {
                this.initLeaf();
            }
            else {
                this.registerEvent(this.app.workspace.on('layout-ready', this.initLeaf.bind(this)));
            }
            this.addCommand({
                id: 'open-obsipulse',
                name: 'Open ObsiPulse Profile',
                callback: () => {
                    if (!this.settings.userId) {
                        return new obsidian.Notice('Missing licence key for ObsiPulse plugin');
                    }
                    window.open(`https://www.obsipulse.com/profile/${this.settings.userId}`, '_blank');
                },
            });
            this.addSettingTab(new DailyStatsSettingTab(this.app, this));
        });
    }
    onLicenseKeyUpdate() {
        // TODO: refresh user plugins list on update
        if (this.settings.userId) {
            const plugins = listAllPlugins(this.app);
            this.updateDb(`user/${this.settings.userId}/vault/${this.app.vault.adapter.getName()}/plugins`, JSON.stringify(plugins));
        }
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(VIEW_TYPE_STATS_TRACKER).length) {
            return;
        }
    }
    onQuickPreview(file, contents) {
        if (this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) {
            this.debouncedUpdate(contents, file.path);
        }
    }
    //Credit: better-word-count by Luke Leppan (https://github.com/lukeleppan/better-word-count)
    getWordCount(text) {
        let words = 0;
        const matches = text.match(/[a-zA-Z0-9_\u0392-\u03c9\u00c0-\u00ff\u0600-\u06ff]+|[\u4e00-\u9fff\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/gm);
        if (matches) {
            for (let i = 0; i < matches.length; i++) {
                if (matches[i].charCodeAt(0) > 19968) {
                    words += matches[i].length;
                }
                else {
                    words += 1;
                }
            }
        }
        console.log('text----', text, words, text === null || text === void 0 ? void 0 : text.length);
        return words;
    }
    updateWordCount(contents, filepath) {
        console.time('wordCount');
        const curr = this.getWordCount(contents);
        console.timeEnd('wordCount');
        if (this.settings.dayCounts.hasOwnProperty(this.today)) {
            if (this.settings.todaysWordCount.hasOwnProperty(filepath)) {
                //updating existing file
                this.settings.todaysWordCount[filepath].current = curr;
            }
            else {
                //created new file during session
                this.settings.todaysWordCount[filepath] = { initial: curr, current: curr };
            }
        }
        else {
            //new day, flush the cache
            this.settings.todaysWordCount = {};
            this.settings.todaysWordCount[filepath] = { initial: curr, current: curr };
        }
        this.updateCounts();
    }
    updateDate() {
        this.today = formatDateToYYYYMMDD(new Date());
    }
    updateCounts() {
        this.currentWordCount = Object.values(this.settings.todaysWordCount)
            .map((wordCount) => Math.max(0, wordCount.current - wordCount.initial))
            .reduce((a, b) => a + b, 0);
        this.settings.dayCounts[this.today] = this.currentWordCount;
        console.log('---word count updated', this.currentWordCount, this.settings.dayCounts, this.settings);
        if (this.debouncedUpdateDb && this.settings.userId) {
            this.debouncedUpdateDb(`user/${this.settings.userId}/vault/${this.app.vault.adapter.getName()}/daily-counts`, JSON.stringify(this.settings.dayCounts));
        }
    }
    updateDb(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log('---calling update db')
            return obsidian.requestUrl({
                method: 'POST',
                url: `https://mypi.one/webhook/424317ea-705c-41e4-b97b-441337d46f59`,
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({
                    key,
                    value,
                }),
            })
                .then((result) => {
                console.log('--db update done', result);
            })
                .catch(console.error);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (Object.keys(this.settings.dayCounts).length > 0) {
                //ensuring we never reset the data by accident
                yield this.saveData(this.settings);
            }
        });
    }
}

module.exports = DailyStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
