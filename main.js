'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const VIEW_TYPE_STATS_TRACKER = "stats-tracker";

function listAllPlugins(app) {
    const plugins = Object.values(app.plugins.plugins).map((plugin) => ({
        id: plugin.manifest.id,
        name: plugin.manifest.name,
        version: plugin.manifest.version,
    }));
    return plugins;
}
function formatDateToYYYYMMDD(date) {
    // Extracting individual components
    const year = date.getFullYear();
    let month = String(date.getMonth() + 1); // Months are zero-based!
    let day = String(date.getDate());
    // Ensuring two-digit formats for month and day
    if (+month < 10) {
        month = '0' + month;
    }
    if (+day < 10) {
        day = '0' + day;
    }
    // Concatenating components in YYYY-MM-DD format
    return `${year}-${month}-${day}`;
}
const DEFAULT_SETTINGS = {
    dayCounts: {},
    todaysWordCount: {},
    userId: null,
};
class DailyStats extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('--Obsidian Export Stats Plugin Loaded');
            // console.log({
            //   dir: this.app.vault.configDir,
            //   root: this.app.vault.getRoot(),
            //   dirname: __dirname,
            //   name: this.app.vault.adapter.getName(),
            //   path: this.app.vault.adapter.basePath,
            //   id: this.app.appId,
            // })
            yield this.loadSettings();
            if (!this.settings.userId) {
                this.settings.userId = this.app.appId;
            }
            this.statusBarEl = this.addStatusBarItem();
            this.updateDate();
            if (this.settings.dayCounts.hasOwnProperty(this.today)) {
                this.updateCounts();
            }
            else {
                this.currentWordCount = 0;
            }
            this.debouncedUpdate = obsidian.debounce((contents, filepath) => {
                this.updateWordCount(contents, filepath);
            }, 
            // 400,
            1000, false);
            this.debouncedUpdateDb = obsidian.debounce((key, value) => {
                this.updateDb(key, value);
            }, 1000, false);
            this.registerEvent(this.app.workspace.on('quick-preview', this.onQuickPreview.bind(this)));
            this.registerInterval(window.setInterval(() => {
                this.statusBarEl.setText(this.currentWordCount + ' words today ');
            }, 2000));
            this.registerInterval(window.setInterval(() => {
                this.updateDate();
                this.saveSettings();
            }, 5000));
            if (this.app.workspace.layoutReady) {
                this.initLeaf();
            }
            else {
                this.registerEvent(this.app.workspace.on('layout-ready', this.initLeaf.bind(this)));
            }
            // TODO: refresh user plugins list on update
            const plugins = listAllPlugins(this.app);
            this.updateDb(`user/${this.settings.userId}/vault/${this.app.vault.adapter.getName()}/plugins`, JSON.stringify(plugins));
            this.addCommand({
                id: 'open-obsipulse',
                name: 'Open ObsiPulse Profile',
                callback: () => {
                    window.open(`https://www.obsipulse.com/profile/${this.settings.userId}`, '_blank');
                },
            });
        });
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(VIEW_TYPE_STATS_TRACKER).length) {
            return;
        }
        this.app.workspace.getRightLeaf(false).setViewState({
            type: VIEW_TYPE_STATS_TRACKER,
        });
    }
    onQuickPreview(file, contents) {
        if (this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) {
            this.debouncedUpdate(contents, file.path);
        }
    }
    //Credit: better-word-count by Luke Leppan (https://github.com/lukeleppan/better-word-count)
    getWordCount(text) {
        let words = 0;
        const matches = text.match(/[a-zA-Z0-9_\u0392-\u03c9\u00c0-\u00ff\u0600-\u06ff]+|[\u4e00-\u9fff\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/gm);
        if (matches) {
            for (let i = 0; i < matches.length; i++) {
                if (matches[i].charCodeAt(0) > 19968) {
                    words += matches[i].length;
                }
                else {
                    words += 1;
                }
            }
        }
        console.log('text----', text, words, text === null || text === void 0 ? void 0 : text.length);
        return words;
    }
    updateWordCount(contents, filepath) {
        console.time('wordCount');
        const curr = this.getWordCount(contents);
        console.timeEnd('wordCount');
        if (this.settings.dayCounts.hasOwnProperty(this.today)) {
            if (this.settings.todaysWordCount.hasOwnProperty(filepath)) {
                //updating existing file
                this.settings.todaysWordCount[filepath].current = curr;
            }
            else {
                //created new file during session
                this.settings.todaysWordCount[filepath] = { initial: curr, current: curr };
            }
        }
        else {
            //new day, flush the cache
            this.settings.todaysWordCount = {};
            this.settings.todaysWordCount[filepath] = { initial: curr, current: curr };
        }
        this.updateCounts();
    }
    updateDate() {
        this.today = formatDateToYYYYMMDD(new Date());
    }
    updateCounts() {
        this.currentWordCount = Object.values(this.settings.todaysWordCount)
            .map((wordCount) => Math.max(0, wordCount.current - wordCount.initial))
            .reduce((a, b) => a + b, 0);
        this.settings.dayCounts[this.today] = this.currentWordCount;
        console.log('---word count updated', this.currentWordCount, this.settings.dayCounts, this.settings);
        if (this.debouncedUpdateDb) {
            this.debouncedUpdateDb(`user/${this.settings.userId}/vault/${this.app.vault.adapter.getName()}/daily-counts`, JSON.stringify(this.settings.dayCounts));
        }
    }
    updateDb(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('---calling update db');
            return obsidian.requestUrl({
                method: 'POST',
                url: `https://mypi.one/webhook/424317ea-705c-41e4-b97b-441337d46f59`,
                headers: {
                    'content-type': 'application/json',
                },
                body: JSON.stringify({
                    key,
                    value,
                }),
            })
                .then((result) => {
                console.log('--db update done', result);
            })
                .catch(console.error);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (Object.keys(this.settings.dayCounts).length > 0) {
                //ensuring we never reset the data by accident
                yield this.saveData(this.settings);
            }
        });
    }
}

module.exports = DailyStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
